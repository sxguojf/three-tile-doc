import{_ as d,c as e,o,a2 as a}from"./chunks/framework.BZ48x_LH.js";const _=JSON.parse('{"title":"TileMap 方法","description":"","frontmatter":{},"headers":[],"relativePath":"2.base/04.mapMethod.md","filePath":"2.base/04.mapMethod.md","lastUpdated":1761368239000}'),r={name:"2.base/04.mapMethod.md"};function c(n,t,i,s,p,l){return o(),e("div",null,t[0]||(t[0]=[a('<h1 id="tilemap-方法" tabindex="-1">TileMap 方法 <a class="header-anchor" href="#tilemap-方法" aria-label="Permalink to &quot;TileMap 方法&quot;">​</a></h1><p>TileMap 继承于 threejs 的 Object3D，除了 Object3D 的方法外，它还有如下方法：</p><table tabindex="0"><thead><tr><th>名称</th><th>参数</th><th>返回</th><th>功能</th></tr></thead><tbody><tr><td>geo2map(geo: Vector3)</td><td>geo: 地理坐标（经纬度）</td><td>Vector3：地图模型局地坐标</td><td>地理坐标转地图模型局地坐标</td></tr><tr><td>map2geo(pos: Vector3)</td><td>pos: 地图模型局地坐标</td><td>Vector3：地理坐标（经度、纬度、高度）</td><td>地图模型坐标转地理坐标</td></tr><tr><td>geo2world(geo:Vector3)</td><td>geo: 地理坐标（经纬度）</td><td>Vector3：世界坐标系坐标</td><td>地理坐标转世界坐标</td></tr><tr><td>world2geo(world:Vector)</td><td>world:世界坐标</td><td>Vector3：地理坐标（经度、纬度、高度）</td><td>世界坐标转地理坐标</td></tr><tr><td>getLocalInfoFromGeo(geo: Vector3)</td><td>geo: 地理坐标（经纬度）</td><td>LocationInfo：它继承于 THREE.Intersection，除了交点信息，增加了 location 属性，包含地理坐标（经度、纬度、高度）</td><td>获取指定地理坐标的地面信息（法向量、高度等）</td></tr><tr><td>getLocalInfoFromWorld(pos: Vector3)</td><td>pos: 世界坐标</td><td>LocationInfo：它继承于 THREE.Intersection，除了交点信息，增加了 location 属性，包含地理坐标（经度、纬度、高度）</td><td>获取指定世界坐标的地面信息（法向量、高度等）</td></tr><tr><td>getLocalInfoFromScreen(camera: Camera, pointer: Vector2)</td><td>camera: 摄像机 ,pointer:屏幕坐标</td><td>LocationInfo：它继承于 THREE.Intersection，除了交点信息，增加了 location 属性，包含地理坐标（经度、纬度、高度）</td><td>获取指定屏幕坐标的地面信息（法向量、高度等）</td></tr><tr><td>reload()</td><td>void</td><td>void</td><td>重新加载地图，在改变地图数据源后调用它才能生效 <strong>（V0.11.0 后不需要调用）</strong></td></tr><tr><td>static create(params: MapParams)</td><td>params:地图构建参数</td><td>TileMap：瓦片地图对象</td><td>静态工厂函数，与构造函数功能参数相同</td></tr></tbody></table>',3)]))}const h=d(r,[["render",c]]);export{_ as __pageData,h as default};
